# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SP_CroquiFiscal
                                 A QGIS plugin
 Baixa o croqui fiscal do site da prefeitura
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-10
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Marcelo Baliú Fiamenghi
        email                : ma.baliu@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QApplication
from PyQt5.QtWidgets import QMenu


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geosampa_api_dialog import GEOSAMPA_apiDialog

from qgis.core import *
from qgis.gui import *
from qgis.utils import iface
from datetime import datetime
import urllib
import os.path
import sys


class GEOSAMPA_api:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SP_CroquiFiscal_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Croqui Fiscal')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SP_CroquiFiscal', message)


    def spurb_add_submenu(self, submenu):
        #
        if self.spurbanismo_menu != None:
            self.spurbanismo_menu.addMenu(submenu)
        else:
            self.iface.addPluginToMenu("&sp_urbanismo-bug", submenu.menuAction())
            
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

            # Cria o MENU superior v2
            # self.spurbanismo_menu = QMenu(self.iface.mainWindow())
            # self.spurbanismo_menu.setObjectName("SPUrbMenu")
            # self.spurbanismo_menu.setTitle("SP_Urbanismo")

            # self.cadastro_menu = QMenu(QCoreApplication.translate("sp_urbanismo", "&Cadastro"))
            # self.spurb_add_submenu(self.cadastro_menu)


        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/croqui_fiscal/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SPUrb Croqui Fiscal'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def select_output(self):
        global folderName

        folderName = QFileDialog.getExistingDirectory( self.dlg, caption="Pasta de Croqui Fiscal", directory=os.path.expanduser("~")+r'\downloads')
        self.dlg._diretorio.setText(folderName)


    # Recarrega os valores de CAMPOS
    def load_fields(self):
        layers = [l.layer() for l in QgsProject.instance().layerTreeRoot().children()]
        # Recebe a camada selecionada
        choosedLayerIndex = self.dlg._camada.currentIndex()
        choosedLayers = layers[choosedLayerIndex]

        # Carrega os campos possíveis
        fields = list(choosedLayers.fields())
        fields_name = [n.name() for n in fields]


        self.dlg._setor.clear()
        self.dlg._setor.addItems(fields_name)
        self.dlg._quadra.clear()
        self.dlg._quadra.addItems(fields_name)

        self.dlg._setor.setCurrentIndex(self.dlg._setor.findText('qd_setor'))
        self.dlg._quadra.setCurrentIndex(self.dlg._setor.findText('qd_fiscal'))
        return fields_name




    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Croqui Fiscal'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""


        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SP_CroquiFiscalDialog()
            self.dlg._diretorio_botao.clicked.connect(self.select_output)

        

        # LAYERS OPTIONS
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg._camada.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg._camada.addItems([layer.name() for layer in layers])
        # Choose the active Layer
        layers = [l.layer() for l in layers]
        index = layers.index(iface.activeLayer())
        if index is not None:
            self.dlg._camada.setCurrentIndex(index)

        # FIELDS OPTION
        self.load_fields()
        self.dlg._load_fields.clicked.connect(self.load_fields)
        # --Dentro da função
        # self.dlg._setor.setCurrentIndex(self.dlg._setor.findText('qd_setor'))
        # self.dlg._quadra.setCurrentIndex(self.dlg._setor.findText('qd_fiscal'))


        # Diretório padrão - para reconhecer qual a pasta em que usuário gosta de salvar
        Diretorio_QuadrasFiscais = "\\".join(os.path.dirname(__file__).split('/'))
        Diretorio_QuadrasFiscais = "\\".join([Diretorio_QuadrasFiscais, r'Diretorio_QuadrasFiscais.txt'])
        if os.path.exists(Diretorio_QuadrasFiscais):
            with open(Diretorio_QuadrasFiscais) as file:
                # print(Diretorio_QuadrasFiscais)
                folderName = file.read()
            self.dlg._diretorio.setText(folderName)




        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:


            if self.dlg._selectedFeatures.isChecked():
                # Obtem as feições selecionadas da camada indicada
                choosedLayerIndex = self.dlg._camada.currentIndex()
                choosedLayers = layers[choosedLayerIndex]#.layer()
                selectedFeatures = choosedLayers.selectedFeatures()

                # Retorna os campos selecionados
                Campo_Setor = self.dlg._setor.currentText ()
                Campo_Quadra = self.dlg._quadra.currentText ()
                print(Campo_Quadra, Campo_Setor)
                
                # Obtem os valores distintos de SQ, somente das que são do tipo FISCAL
                SQ_Lista = set() # Limpa gratuitamente o SQ_Lista
                field_index = choosedLayers.fields().indexFromName('qd_tipo') # Verifica se existe o campo de TIPO da quadra

                for feature in selectedFeatures:
                    if field_index != -1: # Verifica se existe o campo de TIPO da quadra
                        if feature['qd_tipo'] == 'F':
                            SQ_Lista.add(feature[Campo_Setor]+feature[Campo_Quadra])
                    else:
                        SQ_Lista.add(feature[Campo_Setor]+feature[Campo_Quadra])
            else:
                SQ_Lista = self.dlg._SQ_list.text()
                SQ_Lista = set(SQ_Lista.split(', '))

            print(SQ_Lista)

            # Verifica se todos os SQ possuem 3 dígitos
            for SQ in SQ_Lista:
                if len(SQ) != 6:
                    self.iface.messageBar().pushMessage("Falha", "Alguns SQs ({}) não possuem 6 dígitos!".format(SQ),  level=Qgis.Critical, duration=10)
                    return None



            now = datetime.now()
            ano = now.year
            mes = now.month
            now = str(ano) + '-' + str(mes)

            # Verifica qual provedor usar
            PRODAM = self.dlg._servidor.isChecked()

            # Loop para cada SQ
            for SQ in SQ_Lista:

                if PRODAM:
                    # Requerimento ao endereço da PRODAM
                    uri = 'http://sf9402.app.prodam/intranet/frmConsultaCroquiPDF.aspx?pstrSetor={0:0>3}&pstrQuadra={1:0>3}'.format(SQ[:3], SQ[3:])
                else:
                    # Requerimento ao endereço do GeoSampa Cidadão
                    uri = 'http://geosampa.prefeitura.sp.gov.br/PaginasPublicas/DownloadCroqui.aspx?setor={0:0>3}&quadra={1:0>3}'.format(SQ[:3], SQ[3:])
                ################################ fileobj = urllib.request.urlopen (uri)
                # fileobj = "" ########## MODO DE TESTE
                # print(uri)  ########## MODO DE TESTE


                ##TODO: Criar diretório


                # Cria um novo arquivo e salva o conteúdo
                file = open(folderName + r'\CroquiFiscal---{0:0>3}_{1:0>3}---{2}.pdf'.format(SQ[:3], SQ[3:], now), 'bw')
                # file.write(fileobj) ########## MODO DE TESTE
                file.write(urllib.request.urlopen(uri).read())
                file.close()

            self.iface.messageBar().pushMessage("Sucesso", "Arquivos salvos em " +  folderName,  level=Qgis.Success, duration=5)